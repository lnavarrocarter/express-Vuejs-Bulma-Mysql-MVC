'use strict';

// 
var express = require('express');
var glob = require('glob');
var logger = require('morgan');
var cookieParser = require('cookie-parser');
var bodyParser = require('body-parser');
var compress = require('compression');
var methodOverride = require('method-override');
var cookieSession = require('cookie-session');
var helmet = require('helmet');
var csrf = require('csurf');
var validator = require('express-validator');
var expressVue = require('express-vue');
var oauth2Api = require('./api');
var path = require('path');

module.exports.init = function (app, config) {
    //Setup
    var env = process.env.NODE_ENV || 'development';
    var router = express.Router();
    var logType = 'dev';
    app.locals.ENV = env;
    app.locals.ENV_DEVELOPMENT = env === 'development';
    app.locals.rootPath = process.env.ROOT_PATH;

    //ExpressVue Setup
    //Latest non-production version of vue as of writing this doc, 
    //you can go to https://unpkg.com/vue/ to find the latest version
    //check the vuejs.org docs for more info
    var vueScript = 'https://unpkg.com/vue@2.4.2/dist/vue.js';

    if (process.env.NODE_ENV === 'production') {
        //its production so use the minimised production build of vuejs
        vueScript = 'https://unpkg.com/vue';
    }

    var vueOptions = {
        rootPath: path.join(__dirname, 'routes'),
        vue: {
            head: {
                meta: [{ script: vueScript }, { style: 'assets/rendered/style.css' }, { style: 'https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css' }, { style: 'https://cdnjs.cloudflare.com/ajax/libs/bulma/0.6.1/css/bulma.min.css' }, { style: 'https://cdnjs.cloudflare.com/ajax/libs/bulma/0.6.1/css/bulma.min.css.map' }]
            }
        }
    };
    var expressVueMiddleware = expressVue.init(vueOptions);
    app.use(expressVueMiddleware);

    //Security
    app.use(helmet());
    app.disable('x-powered-by');

    //Api
    var oauth2 = oauth2Api.init();
    app.use('/oauth2', oauth2);

    app.use(bodyParser.json());
    app.use(bodyParser.urlencoded({
        extended: true
    }));
    app.use(validator());

    app.use(compress());

    app.use(app.locals.rootPath, express.static(config.root));

    var sessionConfig = {
        secret: 'CHANGE_ME_TOKEN',
        name: 'session',
        keys: ['CHANGE_ME', 'ME_TOO_PLEASE'],
        resave: true,
        saveUninitialized: true,
        cookie: {
            domain: 'foo.bar.com',
            secure: false,
            httpOnly: true
        }
    };
    if (env === 'production') {
        app.set('trust proxy', 1);
        sessionConfig.cookie.secure = true;
        logType = 'combined';
    }

    if (env === 'development') {
        app.use(logger(logType));
    }

    app.use(cookieParser());

    app.use(methodOverride());

    app.use(cookieSession(sessionConfig));

    app.use(csrf({
        cookie: true
    }));

    app.use(function (req, res, next) {
        res.cookie('token', req.csrfToken(), {
            path: '/'
        });
        next();
    });

    app.use('/', router);

    var controllers = glob.sync(config.root + '/routes/**/*.js');
    controllers.forEach(function (controller) {
        module.require(controller).default(router);
    });

    app.use(function (req, res) {
        var data = {
            title: 'Error 404'
        };
        var vueOptions = {
            head: {
                title: 'Error 404'
            }
        };
        res.statusCode = 404;
        res.renderVue('error', data, vueOptions);
    });

    app.use(function onError(error, req, res, next) {
        res.statusCode = 500;
        var data = {
            debug: env === 'development',
            errorCode: error.code,
            error: error.stack
        };
        if (res.statusCode) {
            res.renderVue('error', data);
        } else {
            next();
        }
    });
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
